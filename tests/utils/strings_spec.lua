describe('core.utils.strings', function()
  local tested = require 'utils.strings'

  it('are.empty', function()
    assert.is_true(tested.is_empty '')
    assert.is_true(tested.is_empty(nil))
    assert.is_false(tested.is_empty 'test')
    assert.is_false(tested.is_empty ' ')
  end)

  it('pop', function()
    assert.are.same({ '', '' }, { tested.pop '' })
    assert.are.same({ nil, '' }, { tested.pop(nil) })
    assert.are.same({ 'ab', 'c' }, { tested.pop 'abc' })
    assert.are.same({ '', 'a' }, { tested.pop 'a' })
  end)

  it('push', function()
    assert.are.equal('a', tested.push('', 'a'))
    assert.are.equal(nil, tested.push(nil, 'a'))
    assert.are.equal('abc', tested.push('ab', 'c'))
    assert.are.equal('ab', tested.push('ab', ''))
  end)

  it('replace', function()
    assert.are.same({ '', 0 }, { tested.replace('', 'a', 'b') })
    assert.are.same({ 'abc', 0 }, { tested.replace('abc', '', 'b') })
    assert.are.same({ nil, 0 }, { tested.replace(nil, 'a', 'b') })
    assert.are.same({ 'abc', 0 }, { tested.replace('abc', nil, 'b') })
    assert.are.same({ '', 0 }, { tested.replace('', '', 'b') })
    assert.are.same({ nil, 0 }, { tested.replace(nil, nil, 'b') })
    assert.are.same({ 'bc', 1 }, { tested.replace('abc', 'a') })
    assert.are.same({ 'ab', 1 }, { tested.replace('abc', 'c') })
    assert.are.same({ 'ab', 2 }, { tested.replace('abcc', 'c') })
    assert.are.same({ 'bbc', 1 }, { tested.replace('abc', 'a', 'b') })
    assert.are.same({ 'bbbc', 2 }, { tested.replace('aabc', 'a', 'b') })
    assert.are.same({ 'bc', 1 }, { tested.replace('abc', 'ab', 'b') })
    assert.are.same({ 'abb', 1 }, { tested.replace('abc', 'c', 'b') })
    assert.are.same({ 'ab%15', 1 }, { tested.replace('abc', 'c', '%15') })
    assert.are.same({ 'abc', 1 }, { tested.replace('a%15c', '%15', 'b') })
    assert.are.same({ 'abbc', 2 }, { tested.replace('a%15%15c', '%15', 'b') })
  end)

  it('replace_range', function()
    assert.are.equal('', tested.replace_range('', '', 0))
    assert.are.equal(nil, tested.replace_range(nil, '', 0))
    assert.are.equal(nil, tested.replace_range(nil, nil, 0))
    assert.are.equal('', tested.replace_range('', nil, 0))
    assert.are.equal('abc', tested.replace_range('abc', '', 0))
    assert.are.equal('abc', tested.replace_range('abc', nil, 0))
    assert.are.equal('abTEST', tested.replace_range('abc', 'TEST', 3))
    assert.are.equal('abTESTc', tested.replace_range('abc', 'TEST', 3, 3))
    assert.are.equal('abTESTcd', tested.replace_range('abcd', 'TEST', 3, 3))
    assert.are.equal('abTESTde', tested.replace_range('abcde', 'TEST', 3, 4))
    assert.are.equal('TEST', tested.replace_range('abc', 'TEST', 1))
    assert.are.equal('TESTabc', tested.replace_range('abc', 'TEST', 1, 1))
    assert.are.equal('TESTbc', tested.replace_range('abc', 'TEST', 1, 2))

    -- TODO: out of bounds start_pos & end_pos
  end)

  it('insert', function()
    assert.are.equal('', tested.insert('', '', 0))
    assert.are.equal(nil, tested.insert(nil, '', 0))
    assert.are.equal(nil, tested.insert(nil, nil, 0))
    assert.are.equal('', tested.insert('', nil, 0))
    assert.are.equal('abc', tested.insert('abc', '', 0))
    assert.are.equal('abc', tested.insert('abc', '', 2))
    assert.are.equal('abc', tested.insert('abc', nil, 0))
    assert.are.equal('abc', tested.insert('abc', nil, 2))
    assert.are.equal('TESTabc', tested.insert('abc', 'TEST', 1))
    assert.are.equal('aTESTbc', tested.insert('abc', 'TEST', 2))
    assert.are.equal('abTESTc', tested.insert('abc', 'TEST', 3))
    assert.are.equal('abcTEST', tested.insert('abc', 'TEST', 4))

    -- TODO: out of bounds pos
  end)

  it('lines', function()
    assert.are.equal(nil, tested.lines(nil))
    assert.are.same({ '' }, tested.lines '')
    assert.are.same({ 'abc' }, tested.lines 'abc')
    assert.are.same({ 'abc', '' }, tested.lines 'abc\n')
    assert.are.same({ 'abc', '' }, tested.lines 'abc\r')
    assert.are.same({ 'abc', '' }, tested.lines 'abc\n\r')
    assert.are.same({ 'abc', '' }, tested.lines 'abc\r\n')
    assert.are.same({ 'abc', 'd' }, tested.lines 'abc\nd')
    assert.are.same({ 'abc', 'd' }, tested.lines 'abc\rd')
    assert.are.same({ 'abc', 'd' }, tested.lines 'abc\r\nd')
    assert.are.same({ 'abc', 'd' }, tested.lines 'abc\n\rd')
    assert.are.same({ 'abc', 'd' }, tested.lines 'abc\n\r\n\n\n\n\nd')
  end)

  it('truncate', function()
    assert.are.equal(nil, tested.truncate(nil, 0))
    assert.are.equal('', tested.truncate('', 0))
    assert.are.equal('abc', tested.truncate('abc', 5))
    assert.are.equal('a', tested.truncate('abc', 1))
    assert.are.equal('ab', tested.truncate('abc', 2))
    assert.are.equal('abc', tested.truncate('abc', 3))
  end)

  it('char_at', function()
    assert.are.equal(nil, tested.char_at(nil, 0))
    assert.are.equal(nil, tested.char_at('', 0))
    assert.are.equal(nil, tested.char_at('abc', 15))
    assert.are.equal('a', tested.char_at('abc', 1))
    assert.are.equal('b', tested.char_at('abc', 2))
    assert.are.equal('c', tested.char_at('abc', 3))
  end)

  it('chars', function()
    assert.are.same({}, tested.chars '')
    assert.are.same({}, tested.chars(nil))
    assert.are.same({ 'a', 'b', 'c' }, tested.chars 'abc')
    assert.are.same({ '.', '.', '.' }, tested.chars '...')
  end)

  it('contains', function()
    assert.is_false(tested.contains(nil, nil))
    assert.is_false(tested.contains(nil, ''))
    assert.is_false(tested.contains('', nil))
    assert.is_false(tested.contains('abc', nil))
    assert.is_true(tested.contains('', ''))
    assert.is_true(tested.contains('abc', ''))
    assert.is_true(tested.contains('abc', 'a'))
    assert.is_true(tested.contains('abc', 'b'))
    assert.is_true(tested.contains('abc', 'c'))
    assert.is_true(tested.contains('abc', 'a', 1))
    assert.is_false(tested.contains('abc', 'a', 2))
  end)

  it('starts_with', function()
    assert.is_true(tested.starts_with('', ''))
    assert.is_false(tested.starts_with(nil, ''))
    assert.is_false(tested.starts_with('', nil))
    assert.is_false(tested.starts_with(nil, nil))
    assert.is_false(tested.starts_with('a', 'ab'))
    assert.is_true(tested.starts_with('a', 'a'))
    assert.is_true(tested.starts_with('ab', 'a'))
    assert.is_false(tested.starts_with('ab', 'b'))
    assert.is_true(tested.starts_with('a b', 'a'))
    assert.is_true(tested.starts_with('a b', 'a '))
    assert.is_true(tested.starts_with('a\nb', 'a'))
    assert.is_true(tested.starts_with('a\nb', 'a\n'))
  end)

  it('ends_with', function()
    assert.is_true(tested.ends_with('', ''))
    assert.is_false(tested.ends_with(nil, ''))
    assert.is_false(tested.ends_with('', nil))
    assert.is_false(tested.ends_with(nil, nil))
    assert.is_false(tested.ends_with('a', 'ab'))
    assert.is_true(tested.ends_with('a', 'a'))
    assert.is_true(tested.ends_with('ab', 'b'))
    assert.is_false(tested.ends_with('ab', 'a'))
    assert.is_true(tested.ends_with('a b', 'b'))
    assert.is_true(tested.ends_with('a b', ' b'))
    assert.is_true(tested.ends_with('a\nb', 'b'))
    assert.is_true(tested.ends_with('a\nb', '\nb'))
  end)

  it('split', function()
    assert.are.same({}, tested.split(nil, nil))
    assert.are.same({}, tested.split(nil, ''))
    assert.are.same({}, tested.split('', nil))
    assert.are.same({}, tested.split('', ''))
    assert.are.same({}, tested.split('abc', ''))
    assert.are.same({ 'a', 'b', 'c' }, tested.split('a.b.c', '.'))
  end)

  it('join', function()
    assert.are.same(nil, tested.join(nil))
    assert.are.same(nil, tested.join(nil, nil))
    assert.are.same(nil, tested.join(nil, ''))
    assert.are.same('', tested.join {})
    assert.are.same('', tested.join({}, nil))
    assert.are.same('', tested.join({}, ''))
    assert.are.same('abc', tested.join({ 'a', 'b', 'c' }, ''))
    assert.are.same('a.b.c', tested.join({ 'a', 'b', 'c' }, '.'))
  end)

  it('trim', function()
    assert.are.equal(nil, tested.trim(nil))
    assert.are.equal('', tested.trim '')
    assert.are.equal('abc', tested.trim 'abc')
    assert.are.equal('abc', tested.trim ' abc')
    assert.are.equal('abc', tested.trim 'abc ')
    assert.are.equal('abc', tested.trim ' abc ')
    assert.are.equal('abc', tested.trim '    abc  ')
    assert.are.equal('abc', tested.trim '    abc  \n\r\t ')
  end)

  it('trim_start', function()
    assert.are.equal(nil, tested.trim_start(nil))
    assert.are.equal('', tested.trim_start '')
    assert.are.equal('abc', tested.trim_start 'abc')
    assert.are.equal('abc', tested.trim_start ' abc')
    assert.are.equal('abc ', tested.trim_start 'abc ')
    assert.are.equal('abc ', tested.trim_start ' abc ')
    assert.are.equal('abc  ', tested.trim_start '    abc  ')
    assert.are.equal('abc   ', tested.trim_start '  \n\r\t  abc   ')
  end)

  it('trim_end', function()
    assert.are.equal(nil, tested.trim_end(nil))
    assert.are.equal('', tested.trim_end '')
    assert.are.equal('abc', tested.trim_end 'abc')
    assert.are.equal(' abc', tested.trim_end ' abc')
    assert.are.equal('abc', tested.trim_end 'abc ')
    assert.are.equal(' abc', tested.trim_end ' abc ')
    assert.are.equal('    abc', tested.trim_end '    abc  ')
    assert.are.equal('    abc', tested.trim_end '    abc  \n\r\t ')
  end)

  it('pad_start', function()
    assert.are.equal('    ', tested.pad_start(nil, 4))
    assert.are.equal('    ', tested.pad_start('', 4))
    assert.are.equal(' abc', tested.pad_start('abc', 4))
    assert.are.equal('abcd', tested.pad_start('abcd', 4))
    assert.are.equal('abcde', tested.pad_start('abcde', 4))
  end)

  it('pad_end', function()
    assert.are.equal('    ', tested.pad_end(nil, 4))
    assert.are.equal('    ', tested.pad_end('', 4))
    assert.are.equal('abc ', tested.pad_end('abc', 4))
    assert.are.equal('abcd', tested.pad_end('abcd', 4))
    assert.are.equal('abcde', tested.pad_end('abcde', 4))
  end)

  it('center', function()
    assert.are.equal('    ', tested.center(nil, 4))
    assert.are.equal('    ', tested.center('', 4))
    assert.are.equal('abc ', tested.center('abc', 4))
    assert.are.equal('abcd', tested.center('abcd', 4))
    assert.are.equal('abcde', tested.center('abcde', 4))
    assert.are.equal(' ab ', tested.center('ab', 4))
    assert.are.equal(' ab  ', tested.center('ab', 5))
  end)

  it('reverse', function()
    assert.are.equal(nil, tested.reverse(nil))
    assert.are.equal('', tested.reverse '')
    assert.are.equal('a', tested.reverse 'a')
    assert.are.equal('ba', tested.reverse 'ab')
    assert.are.equal('cba', tested.reverse 'abc')
    assert.are.equal('c b a', tested.reverse 'a b c')
    assert.are.equal('c\tb\na', tested.reverse 'a\nb\tc')
  end)

  it('to_lower', function()
    assert.are.equal('abc', tested.to_lower 'abc')
    assert.are.equal('abc', tested.to_lower 'ABC')
  end)

  it('to_upper', function()
    assert.are.equal('ABC', tested.to_upper 'abc')
    assert.are.equal('ABC', tested.to_upper 'ABC')
  end)

  it('capitalize', function()
    assert.are.equal(nil, tested.capitalize(nil))
    assert.are.equal('', tested.capitalize '')
    assert.are.equal('Abc', tested.capitalize 'abc')
    assert.are.equal('Abc', tested.capitalize 'Abc')
    assert.are.equal('ABC', tested.capitalize 'ABC')
    assert.are.equal('The caps work', tested.capitalize 'the caps work')
  end)

  it('to_title_case', function()
    assert.are.equal(nil, tested.to_title_case(nil))
    assert.are.equal('', tested.to_title_case '')
    assert.are.equal('Abc', tested.to_title_case 'abc')
    assert.are.equal('Abc', tested.to_title_case 'Abc')
    assert.are.equal('ABC', tested.to_title_case 'ABC')
    assert.are.equal('The Caps Work', tested.to_title_case 'the caps work')
  end)
end)
